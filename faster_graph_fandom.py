import pandas as pd
import streamlit as st
from pyvis.network import Network
import networkx as nx
import ast
import re

# –ö—ç—à–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    df = pd.read_json(r"C:\Users\User\Desktop\—Å—Ç—Ä–∏–º–ª–∏—Ç_–≥—Ä–∞—Ñ_—Ç–æ–ª—å–∫–æ_–∏–∑_–≤—ã–±–æ—Ä–∫–∏\top_2000_dataset_starwars")
    
    
    # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å—Ç–∞—Ç–µ–π (document_id)
    aggregated = df.groupby('document_id').agg({
        'title': 'first',
        'outgoing_links': 'sum',
        'source': 'first'
    }).reset_index()
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –≤ set –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    def flatten_links(links_list):
        flat_list = []
        for item in links_list:
            if isinstance(item, list):
                flat_list.extend(item)
            else:
                flat_list.append(item)
        return list(set(flat_list))
    
    aggregated['all_links'] = aggregated['outgoing_links'].apply(flatten_links)
    
    return aggregated

# –ö—ç—à–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∞
@st.cache_data(show_spinner="Building graph...")
def create_graph_data(df):
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    all_pages = df['document_id'].unique().tolist()
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É —Å–≤—è–∑–µ–π
    edges = []
    for _, row in df.iterrows():
        page = row['document_id']
        for link in row['all_links']:
            # –û—á–∏—â–∞–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Å—ã–ª–∫—É
            if isinstance(link, str):
                clean_link = re.sub(r'[^a-zA-Z0-9_]', '', link)
                if clean_link in all_pages: #–≤–æ—Ç –∫–ª—é—á–µ–≤–æ–µ –æ—Ç–ª–∏—á–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –≥—Ä–∞—Ñ–∞, –ø—Ä–æ–≤–µ–∫—Ä–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ —Å–ø–∏—Å–∫–µ —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
                    edges.append((page, clean_link))
    
    # –°—á–∏—Ç–∞–µ–º —Å–≤—è–∑–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–∑–ª–∞
    page_connections = {page: 0 for page in all_pages}
    for edge in edges:
        page_connections[edge[0]] += 1
        page_connections[edge[1]] += 1
    
    return all_pages, edges, page_connections

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = load_data()

# Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("–ì—Ä–∞—Ñ —Å–≤—è–∑–µ–π Star Wars Wiki Fandom")
st.info("–í –∫–∞—á–µ—Å—Ç–≤–µ —É–∑–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã")

# –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∞ (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–æ)
all_pages, edges, page_connections = create_graph_data(df)

# –§–∏–ª—å—Ç—Ä –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–∑–ª–æ–≤
min_connections = st.slider(
    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–∑–ª–∞", 
    min_value=0, 
    max_value=70, 
    value=10
)

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–∑–ª–æ–≤
max_nodes = st.slider(
    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤", 
    min_value=100, 
    max_value=900, 
    value=100
)

# –§–∏–ª—å—Ç—Ä—É–µ–º —É–∑–ª—ã
filtered_pages = [p for p in all_pages if page_connections[p] >= min_connections]
filtered_pages = filtered_pages[:max_nodes]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
filtered_edges = [e for e in edges if e[0] in filtered_pages and e[1] in filtered_pages]

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
st.sidebar.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
st.sidebar.metric("–í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π", len(all_pages))
st.sidebar.metric("–í—Å–µ–≥–æ —Å–≤—è–∑–µ–π", len(edges))
st.sidebar.metric("–û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —É–∑–ª–æ–≤", len(filtered_pages))
st.sidebar.metric("–û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Å–≤—è–∑–µ–π", len(filtered_edges))

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞ (–ª–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
if st.button("–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ —Å–≤—è–∑–µ–π", type="primary"):
    if not filtered_pages or not filtered_edges:
        st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.")
    else:
        with st.spinner("–°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏..."):
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ
            g = nx.DiGraph()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã —Å —Ä–∞–∑–º–µ—Ä–æ–º, –∑–∞–≤–∏—Å—è—â–∏–º –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–≤—è–∑–µ–π
            for page in filtered_pages:
                size = min(50, 10 + page_connections[page] * 0.5)
                g.add_node(page, label=page, title=page, size=size)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏
            for edge in filtered_edges:
                g.add_edge(edge[0], edge[1])
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            net = Network(
                height="700px", 
                width="100%", 
                bgcolor="#222222", 
                font_color="white",
                directed=True,
                notebook=False
            )
            
            # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –±–æ–ª—å—à–∏—Ö –≥—Ä–∞—Ñ–æ–≤
            net.barnes_hut(
                gravity=-100000,
                central_gravity=0.5,
                spring_length=200,
                spring_strength=0.001,
                damping=0.2,
                overlap=0
            )
            
            net.from_nx(g)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
            net.save_graph("graph.html")
            HtmlFile = open("graph.html", "r", encoding="utf-8")
            source_code = HtmlFile.read() 
            st.components.v1.html(source_code, height=720)

# –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç–∞—Ç—å–∏
st.sidebar.subheader("üîç –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç—å–∏")
search_term = st.sidebar.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏")
if search_term:
    # –û—á–∏—â–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    clean_search = re.sub(r'[^a-zA-Z0-9_]', '', search_term)
    
    if clean_search in all_pages:
        # –í—Ö–æ–¥—è—â–∏–µ —Å—Å—ã–ª–∫–∏
        incoming = [e[0] for e in edges if e[1] == clean_search]
        # –ò—Å—Ö–æ–¥—è—â–∏–µ —Å—Å—ã–ª–∫–∏
        outgoing = [e[1] for e in edges if e[0] == clean_search]
        
        st.subheader(f"–°–≤—è–∑–∏ –¥–ª—è: {clean_search}")
        col1, col2 = st.columns(2)
        
        with col1:
            st.write(f"**–í—Ö–æ–¥—è—â–∏–µ —Å—Å—ã–ª–∫–∏ ({len(incoming)}):**")
            if incoming:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ
                incoming_df = pd.Series(incoming).value_counts().reset_index()
                incoming_df.columns = ['–°—Ç–∞—Ç—å—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
                st.dataframe(incoming_df, height=300)
            else:
                st.write("–ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö —Å—Å—ã–ª–æ–∫")
        
        with col2:
            st.write(f"**–ò—Å—Ö–æ–¥—è—â–∏–µ —Å—Å—ã–ª–∫–∏ ({len(outgoing)}):**")
            if outgoing:
                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ
                outgoing_df = pd.Series(outgoing).value_counts().reset_index()
                outgoing_df.columns = ['–°—Ç–∞—Ç—å—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
                st.dataframe(outgoing_df, height=300)
            else:
                st.write("–ù–µ—Ç –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å—Å—ã–ª–æ–∫")
    else:
        st.sidebar.warning("–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

# –¢–æ–ø —Å–∞–º—ã—Ö —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π
st.sidebar.subheader("üèÜ –¢–æ–ø —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π")
top_pages = sorted(page_connections.items(), key=lambda x: x[1], reverse=True)[:10]

# –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤
max_connections = max(page_connections.values()) if page_connections else 1

for page, count in top_pages:
    progress_value = min(count / max_connections, 1.0)
    st.sidebar.progress(progress_value, text=f"{page}: {count} —Å–≤—è–∑–µ–π")