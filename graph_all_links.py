import pandas as pd
import streamlit as st
from pyvis.network import Network
import networkx as nx
import re
import time

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("–ì—Ä–∞—Ñ —Å–≤—è–∑–µ–π Star Wars Wiki Fandom")
st.info("–£—á–∏—Ç—ã–≤–∞—é—Ç—Å—è –≤—Å–µ —Å—Ç–∞—Ç—å–∏, –¥–∞–∂–µ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ —Å–ø–∞—Ä—Å–µ–Ω—ã")

# –ö—ç—à–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (—Å –≤—ã–≤–æ–¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —É—Å–ø–µ—Ö\–Ω–µ—É—Å–ø–µ—Ö)
        df = pd.read_json(r"C:\Users\User\Desktop\—Å—Ç—Ä–∏–º–ª–∏—Ç_–≥—Ä–∞—Ñ_–≤—Å–µ_–ª–∏–Ω–∫–∏\top_10_dataset_starwars")
        st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return pd.DataFrame()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = load_data()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ
if df.empty:
    st.stop()

# –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
progress_bar = st.progress(0)
status_text = st.empty()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ (—É–±–∏—Ä–∞–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, –±—É–∫–≤ –∏ –Ω–∏–∂–Ω–∏—Ö –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–π)
def normalize_id(node_id):
    return re.sub(r'[^a-zA-Z0-9_]', '', str(node_id))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def process_data(df):
    status_text.text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö... 0%")
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è document_id
    df['document_id'] = df['document_id'].apply(normalize_id)
    progress_bar.progress(10)
    status_text.text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö... 10%")
    
    # –°–±–æ—Ä –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É–∑–ª–æ–≤ –∏–∑ document_id, —ç—Ç–æ –∫–∞–∫ —Ä–∞–∑ –±—É–¥—É—Ç –ø–µ—Ä–≤–∏—á–Ω—ã–µ —É–∑–ª—ã
    all_nodes = set(df['document_id'].unique())
    progress_bar.progress(20)
    status_text.text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö... 20%")
    
    # –°–±–æ—Ä –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
    all_links = []
    for links in df['outgoing_links']:
        if isinstance(links, list):
            all_links.extend(links) #–ò—Å–ø–æ–ª—å–∑—É–µ–º extend, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è–ª–∏—Å—å –∏–º–µ–Ω–Ω–æ slug'–∏ –∏–∑ —Å–ø–∏—Å–∫–æ–≤ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç—ã, –∞ –Ω–µ —Å–∞–º–∏ —Å–ø–∏—Å–∫–∏
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —É–∑–ª—ã
    normalized_links = [normalize_id(link) for link in all_links if isinstance(link, str)] #–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–µ —Å—Å—ã–ª–∫–∏
    all_nodes.update(normalized_links) #–¥–∞–±–∞–≤–ª—è–µ–º –∫ –æ—Å–Ω–æ–≤–Ω—ã–º —É–∑–ª–∞–º-—Å—Ç–∞—Ç—å—è–º, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–ø–∞—Ä—Å–µ–Ω—ã
    
    progress_bar.progress(50)
    status_text.text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö... 50%")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤—è–∑–µ–π
    edges = []
    for _, row in df.iterrows():
        source = normalize_id(row['document_id'])
        if isinstance(row['outgoing_links'], list):
            for link in row['outgoing_links']:
                if isinstance(link, str):
                    target = normalize_id(link)
                    edges.append((source, target))
    
    progress_bar.progress(80)
    status_text.text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö... 80%")
    
    #–ü–æ–¥—Å—á–µ—Ç —Å–≤—è–∑–µ–π
    node_connections = {}
    for node in all_nodes:
        # –ò—Å—Ö–æ–¥—è—â–∏–µ + –≤—Ö–æ–¥—è—â–∏–µ —Å–≤—è–∑–∏
        out_count = sum(1 for s, t in edges if s == node)
        in_count = sum(1 for s, t in edges if t == node)
        node_connections[node] = out_count + in_count
    
    progress_bar.progress(100)
    status_text.text("–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    time.sleep(0.5)
    status_text.empty()
    progress_bar.empty()
    
    return list(all_nodes), edges, node_connections

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
all_nodes, edges, node_connections = process_data(df)

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
st.sidebar.header("üîß –§–∏–ª—å—Ç—Ä—ã")

# –§–∏–ª—å—Ç—Ä –ø–æ —Å–≤—è–∑—è–º
min_connections = st.sidebar.slider(
    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–µ–π", 
    min_value=0, 
    max_value=70, 
    value=10
)

# –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–∑–ª–æ–≤
max_nodes = st.sidebar.slider(
    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∑–ª–æ–≤", 
    min_value=100, 
    max_value=1000, 
    value=100
)

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
filtered_nodes = [n for n in all_nodes if node_connections.get(n, 0) >= min_connections]
filtered_nodes = filtered_nodes[:max_nodes]
filtered_edges = [(s, t) for s, t in edges if s in filtered_nodes and t in filtered_nodes]

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
st.sidebar.header("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
st.sidebar.metric("–í—Å–µ–≥–æ —É–∑–ª–æ–≤", len(all_nodes))
st.sidebar.metric("–í—Å–µ–≥–æ —Å–≤—è–∑–µ–π", len(edges))
st.sidebar.metric("–û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —É–∑–ª–æ–≤", len(filtered_nodes))
st.sidebar.metric("–û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Å–≤—è–∑–µ–π", len(filtered_edges))

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞
if st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ", type="primary", use_container_width=True):
    if not filtered_nodes or not filtered_edges:
        st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞. –£–º–µ–Ω—å—à–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã.")
    else:
        with st.spinner("–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞..."):
            # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞—Ñ
            g = nx.DiGraph()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É–∑–ª—ã
            for node in filtered_nodes:
                connections = node_connections.get(node, 0)
                size = max(5, min(30, connections / 5))  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä
                g.add_node(node, label=node, title=f"{node}\n–°–≤—è–∑–µ–π: {connections}", size=size)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏
            for source, target in filtered_edges:
                g.add_edge(source, target)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            net = Network(
                height="600px", 
                width="100%", 
                bgcolor="#222222", 
                font_color="white",
                directed=True,
                notebook=False
            )
            
            # –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            net.barnes_hut(
                gravity=-30000,
                central_gravity=0.1,
                spring_length=100,
                spring_strength=0.002,
                damping=0.2,
                overlap=0.1
            )
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            net.from_nx(g)
            net.save_graph("graph.html")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º
            HtmlFile = open("graph.html", "r", encoding="utf-8")
            source_code = HtmlFile.read()
            st.components.v1.html(source_code, height=650)
            
            st.success("–ì—Ä–∞—Ñ —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç—Ä–æ–µ–Ω!")

# –ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
st.sidebar.header("üîç –ü–æ–∏—Å–∫ –ø–æ –≥—Ä–∞—Ñ—É")
search_term = st.sidebar.text_input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–∑–ª–∞")

if search_term:
    clean_search = normalize_id(search_term)
    
    if clean_search in all_nodes:
        # –í—Ö–æ–¥—è—â–∏–µ —Å—Å—ã–ª–∫–∏
        incoming = [s for s, t in edges if t == clean_search]
        # –ò—Å—Ö–æ–¥—è—â–∏–µ —Å—Å—ã–ª–∫–∏
        outgoing = [t for s, t in edges if s == clean_search]
        
        st.subheader(f"üîó –°–≤—è–∑–∏ —É–∑–ª–∞: {clean_search}")
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–í—Ö–æ–¥—è—â–∏–µ —Å–≤—è–∑–∏", len(incoming))
            if incoming:
                st.dataframe(pd.DataFrame(incoming, columns=["–ò—Å—Ç–æ—á–Ω–∏–∫"]), height=200)
        
        with col2:
            st.metric("–ò—Å—Ö–æ–¥—è—â–∏–µ —Å–≤—è–∑–∏", len(outgoing))
            if outgoing:
                st.dataframe(pd.DataFrame(outgoing, columns=["–¶–µ–ª—å"]), height=200)
    else:
        st.sidebar.warning("–£–∑–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")

# –¢–æ–ø —É–∑–ª–æ–≤
st.sidebar.header("üèÜ –¢–æ–ø —É–∑–ª–æ–≤ –ø–æ —Å–≤—è–∑—è–º")
if node_connections:
    top_nodes = sorted(node_connections.items(), key=lambda x: x[1], reverse=True)[:10]
    
    for node, count in top_nodes:
        st.sidebar.caption(f"‚Ä¢ {node[:20]}{'...' if len(node) > 20 else ''}: {count} —Å–≤—è–∑–µ–π")